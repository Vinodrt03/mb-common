package com.milkbasket.rest.services.common.communication.template.bean;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import javax.validation.constraints.Null;

import com.milkbasket.core.framework.common.constants.CommonConstants;
import com.milkbasket.core.framework.utility.StringUtils;
import com.milkbasket.core.framework.validator.annotation.AlphaNumeric;
import com.milkbasket.core.framework.validator.annotation.IsFlag;
import com.milkbasket.core.framework.validator.annotation.Mandatory;
import com.milkbasket.core.framework.validator.annotation.MaxLength;
import com.milkbasket.core.framework.validator.annotation.MinLength;
import com.milkbasket.core.framework.validator.annotation.Options;
import com.milkbasket.core.framework.websupport.base.BaseBean;

import com.milkbasket.rest.services.communication.entity.TemplateConstants;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Bean to be returned with template information
 *
 * @author iTuple
 * @version $Id: $Id
 */
@ApiModel(description = "Templates Response")
public class TemplateBean extends BaseBean implements Serializable {

	private static final long serialVersionUID = 201804210000280224L;

	@ApiModelProperty(value = "Autogenerated Database ID. Not Required in input field while save or update.", readOnly = true)
	@Null
	private Long id;

	@ApiModelProperty(value = "Template name. Mandatory input field. Accepts alphanumeric with space.", allowEmptyValue = false)
	@AlphaNumeric(withchars = { ' ', '_' })
	@MaxLength(length = 100)
	@MinLength(length = 1)
	@Mandatory
	private String name;

	@ApiModelProperty(value = "Template Type. Accepts fixed values. Mandatory input field.  Required field. Accepts fixed values", allowEmptyValue = false, allowableValues = "SMS, PUSH, EMAIL, INTERCOM")
	@MaxLength(length = 50)
	@MinLength(length = 1)
	@Mandatory
	@Options(masterDataKey = CommonConstants.MasterDataKey.MSG_TEMPLATE_TYPE, caseSensitive = true)
	private String type;

	@ApiModelProperty(value = "Template Text. Mandatory input field.", allowEmptyValue = false)
	@MaxLength(length = 60000)
	@MinLength(length = 1)
	@Mandatory
	private String text;

	@ApiModelProperty(value = "Template Subject. Mandatory if Template Type is EMAIL. None mandatory input field. Accepts alphanumeric with space.", allowEmptyValue = true)
	@MaxLength(length = 512)
	@MinLength(length = 0)
	private String subject;

	@ApiModelProperty(value = "Template Module. Required field. Accepts fixed values for Msg Template Module'. Mandatory input field. AAccepts fixed values", allowEmptyValue = false, allowableValues = "RECURRING_ORDER,PROCUREMENT,BASKET,ORDER,ALL")
	@Options(masterDataKey = CommonConstants.MasterDataKey.MSG_TEMPLATE_MODULE, caseSensitive = true)
	@MaxLength(length = 50)
	@MinLength(length = 1)
	@Mandatory
	private String module;

	@ApiModelProperty(value = "Active flag which is either 0(False) or 1(True). Mandatory input field. Accepts fixed values", allowEmptyValue = false, allowableValues = "[1, 0]")
	@IsFlag
	@Mandatory
	private Integer active;

	@Mandatory
	@ApiModelProperty(value = "Manual Flag value. Required field. Accepts fixed values", allowEmptyValue = false, allowableValues = "[1, 0]")
	@IsFlag
	private Integer manual;

	@ApiModelProperty(value = "<br/><br/>NOTES:" + "<br/>  # Sms Type." + "<br/><br/>VALIDATION SCENARIOS:"
			+ "<br/>  # If provided, it should be a valid time or should be null", required = false, allowEmptyValue = true)
	private TemplateConstants.SendType sendType = TemplateConstants.SendType.TRANSACTIONAL;

	@ApiModelProperty(example = "{ \"<key1>\" : \"<value1>\", \"<key2>\" : { \"<key3>\" : \"<value3>\"} }")
	private Map<String, Object> params = new HashMap<>();

	private String data;

	private String templateId;

	public String getData() {
		return data;
	}

	public void setData(final String data) {
		this.data = data;
	}

	/**
	 * <p>
	 * Getter for the field <code>params</code>.
	 * </p>
	 *
	 * @return a {@link java.util.Map} object.
	 */
	public Map<String, Object> getParams() {
		return params;
	}

	/**
	 * <p>
	 * Setter for the field <code>params</code>.
	 * </p>
	 *
	 * @param params
	 *            a {@link java.util.Map} object.
	 */
	public void setParams(final Map<String, Object> params) {
		this.params = params;
	}

	/**
	 * <p>
	 * Method for the finding parameters in text and subject and set in bean to
	 * </p>
	 */
	public void resetParams() {
		final String templateSubject = StringUtils.isEmpty(this.subject) ? "" : this.subject;
		final String templateText = StringUtils.isEmpty(this.text) ? "" : this.text;
		setParams(StringUtils.getFreemarkerTokens(templateText.concat(templateSubject)));
	}

	/**
	 * <p>
	 * Setter for the field <code>id</code>.
	 * </p>
	 *
	 * @param id
	 *            a {@link java.lang.Long} object.
	 */
	public void setId(final Long id) {
		this.id = id;
	}

	/**
	 * <p>
	 * Getter for the field <code>id</code>.
	 * </p>
	 *
	 * @return Autogenerated Database ID. Not Required in Input Field while save or
	 *         update
	 */
	public Long getId() {
		return id;
	}

	/**
	 * <p>
	 * Setter for the field <code>name</code>.
	 * </p>
	 *
	 * @param name
	 *            a {@link java.lang.String} object.
	 */
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 * <p>
	 * Getter for the field <code>name</code>.
	 * </p>
	 *
	 * @return Template name.
	 */
	public String getName() {
		return name;
	}

	/**
	 * <p>
	 * Setter for the field <code>type</code>.
	 * </p>
	 *
	 * @param type
	 *            a {@link java.lang.String} object.
	 */
	public void setType(final String type) {
		this.type = type;
	}

	/**
	 * <p>
	 * Getter for the field <code>type</code>.
	 * </p>
	 *
	 * @return Template Type. Accepts fixed values
	 */
	public String getType() {
		return type;
	}

	/**
	 * <p>
	 * Setter for the field <code>text</code>.
	 * </p>
	 *
	 * @param text
	 *            a {@link java.lang.String} object.
	 */
	public void setText(final String text) {
		this.text = text;
	}

	/**
	 * <p>
	 * Getter for the field <code>text</code>.
	 * </p>
	 *
	 * @return Template Text.
	 */
	public String getText() {
		return text;
	}

	/**
	 * <p>
	 * Setter for the field <code>subject</code>.
	 * </p>
	 *
	 * @param subject
	 *            a {@link java.lang.String} object.
	 */
	public void setSubject(final String subject) {
		this.subject = subject;
	}

	/**
	 * <p>
	 * Getter for the field <code>subject</code>.
	 * </p>
	 *
	 * @return Template Subject. Mandatory if Template Type is EMAIL.
	 */
	public String getSubject() {
		return subject;
	}

	/**
	 * <p>
	 * Setter for the field <code>module</code>.
	 * </p>
	 *
	 * @param module
	 *            a {@link java.lang.String} object.
	 */
	public void setModule(final String module) {
		this.module = module;
	}

	/**
	 * <p>
	 * Getter for the field <code>module</code>.
	 * </p>
	 *
	 * @return Template Module. Required field. Accepts fixed values for Msg
	 *         Template Module'.
	 */
	public String getModule() {
		return module;
	}

	/**
	 * <p>
	 * Setter for the field <code>active</code>.
	 * </p>
	 *
	 * @param active
	 *            a {@link java.lang.Integer} object.
	 */
	public void setActive(final Integer active) {
		this.active = active;
	}

	/**
	 * <p>
	 * Getter for the field <code>active</code>.
	 * </p>
	 *
	 * @return Active flag which is either 0(False) or 1(True).
	 */
	public Integer getActive() {
		return active;
	}

	/**
	 * <p>
	 * Setter for the field <code>manual</code>.
	 * </p>
	 *
	 * @param manual
	 *            a {@link java.lang.Integer} object.
	 */
	public void setManual(final Integer manual) {
		this.manual = manual;
	}

	/**
	 * <p>
	 * Getter for the field <code>manual</code>.
	 * </p>
	 *
	 * @return Manual flag which is either 0(False) or 1(True)
	 */
	public Integer getManual() {
		return manual;
	}

	/**
	 * <p>
	 * Getter for the field <code>sendType</code>.
	 * </p>
	 *
	 * @return a
	 *         {@link com.milkbasket.rest.services.communication.entity.TemplateConstants.SendType}
	 *         object.
	 */
	public TemplateConstants.SendType getSendType() {
		return sendType;
	}

	/**
	 * <p>
	 * Setter for the field <code>sendType</code>.
	 * </p>
	 *
	 * @param sendType
	 *            a
	 *            {@link com.milkbasket.rest.services.communication.entity.TemplateConstants.SendType}
	 *            object.
	 */
	public void setSendType(final TemplateConstants.SendType sendType) {
		this.sendType = sendType;
	}

	/**
	 * <p>
	 * newInstance.
	 * </p>
	 *
	 * @return a
	 *         {@link com.milkbasket.rest.services.common.communication.template.bean.TemplateBean}
	 *         object.
	 */
	public static TemplateBean newInstance() {
		return new TemplateBean();
	}

	public String getTemplateId() {
		return templateId;
	}

	public void setTemplateId(final String templateId) {
		this.templateId = templateId;
	}

}
